// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TournamentManager.DbLib.Model;

#nullable disable

namespace TournamentManager.DbLib.Migrations
{
    [DbContext(typeof(TournamentDbContext))]
    [Migration("20240430092247_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TournamentManager.DbLib.Model.Encounter", b =>
                {
                    b.Property<int>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identifier"));

                    b.Property<int>("Phase")
                        .HasColumnType("int");

                    b.Property<int>("TeamAdentifier")
                        .HasColumnType("int");

                    b.Property<int>("TeamBIdentifier")
                        .HasColumnType("int");

                    b.Property<int>("TournamentIdentifier")
                        .HasColumnType("int");

                    b.HasKey("Identifier");

                    b.HasIndex("TeamAdentifier");

                    b.HasIndex("TeamBIdentifier");

                    b.HasIndex("TournamentIdentifier");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("TournamentManager.DbLib.Model.Match", b =>
                {
                    b.Property<int>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identifier"));

                    b.Property<int>("EncounterIdentifier")
                        .HasColumnType("int");

                    b.Property<int>("LoosingScore")
                        .HasColumnType("int");

                    b.Property<int>("WinningScore")
                        .HasColumnType("int");

                    b.Property<int>("WinningTeamIdentifier")
                        .HasColumnType("int");

                    b.HasKey("Identifier");

                    b.HasIndex("EncounterIdentifier");

                    b.HasIndex("WinningTeamIdentifier");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TournamentManager.DbLib.Model.Player", b =>
                {
                    b.Property<int>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identifier"));

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiotId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamIdentifier")
                        .HasColumnType("int");

                    b.HasKey("Identifier");

                    b.HasIndex("TeamIdentifier");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TournamentManager.DbLib.Model.Team", b =>
                {
                    b.Property<int>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identifier"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Identifier");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TournamentManager.DbLib.Model.Tournament", b =>
                {
                    b.Property<int>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identifier"));

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Identifier");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("TournamentManager.DbLib.Model.Encounter", b =>
                {
                    b.HasOne("TournamentManager.DbLib.Model.Team", "TeamA")
                        .WithMany("EncountersAsA")
                        .HasForeignKey("TeamAdentifier")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TournamentManager.DbLib.Model.Team", "TeamB")
                        .WithMany("EncountersAsB")
                        .HasForeignKey("TeamBIdentifier")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TournamentManager.DbLib.Model.Tournament", "Tournament")
                        .WithMany("Encounters")
                        .HasForeignKey("TournamentIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamA");

                    b.Navigation("TeamB");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("TournamentManager.DbLib.Model.Match", b =>
                {
                    b.HasOne("TournamentManager.DbLib.Model.Encounter", "Encounter")
                        .WithMany()
                        .HasForeignKey("EncounterIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentManager.DbLib.Model.Team", "WinningTeam")
                        .WithMany()
                        .HasForeignKey("WinningTeamIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encounter");

                    b.Navigation("WinningTeam");
                });

            modelBuilder.Entity("TournamentManager.DbLib.Model.Player", b =>
                {
                    b.HasOne("TournamentManager.DbLib.Model.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TournamentManager.DbLib.Model.Team", b =>
                {
                    b.Navigation("EncountersAsA");

                    b.Navigation("EncountersAsB");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("TournamentManager.DbLib.Model.Tournament", b =>
                {
                    b.Navigation("Encounters");
                });
#pragma warning restore 612, 618
        }
    }
}
